name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'

      - name: Extract tag version
        id: tag
        run: |
          REF="${GITHUB_REF##*/}"
          echo "tag=$REF" >> $GITHUB_OUTPUT
          if [[ $REF != v* ]]; then
            echo "Tag must start with v" >&2; exit 1; fi
          echo "version=${REF#v}" >> $GITHUB_OUTPUT

      - name: Check version sync
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          PKG_VER=$(grep -E '^version\s*=\s*"' pyproject.toml | head -1 | sed -E 's/.*version\s*=\s*"([^"]+)".*/\1/')
          INIT_VER=$(grep -E '__version__\s*=\s*"' src/glean_mcp/__init__.py | sed -E 's/.*__version__\s*=\s*"([^"]+)".*/\1/')
          echo "Detected pyproject version: '$PKG_VER'"
          echo "Detected __init__ version: '$INIT_VER'"
          echo "Tag version: '${{ steps.tag.outputs.version }}'"
          if [ -z "$PKG_VER" ] || [ -z "$INIT_VER" ]; then
            echo "Failed to parse versions" >&2; exit 1; fi
          if [ "$PKG_VER" != "${{ steps.tag.outputs.version }}" ]; then
            echo "pyproject.toml version $PKG_VER does not match tag version ${{ steps.tag.outputs.version }}" >&2; exit 1; fi
          if [ "$INIT_VER" != "${{ steps.tag.outputs.version }}" ]; then
            echo "__init__ version $INIT_VER does not match tag version ${{ steps.tag.outputs.version }}" >&2; exit 1; fi
          echo "Version synchronization OK"

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Run tests
        run: |
          pip install .[dev]
          pytest -q || echo "Tests not critical yet"

      - name: Build
        run: python -m build

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          build-args: |
            APP_VERSION=${{ steps.tag.outputs.version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
