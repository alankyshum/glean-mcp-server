name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'

      - name: Extract tag version
        id: tag
        run: |
          REF="${GITHUB_REF##*/}"
          echo "tag=$REF" >> $GITHUB_OUTPUT
          if [[ $REF != v* ]]; then
            echo "Tag must start with v" >&2; exit 1; fi
          echo "version=${REF#v}" >> $GITHUB_OUTPUT

      - name: Check version sync
        run: |
          PKG_VER=$(grep '^version =' pyproject.toml | head -1 | cut -d '"' -f2)
          INIT_VER=$(grep '__version__' src/glean_mcp/__init__.py | cut -d '"' -f2)
          if [ "$PKG_VER" != "${{ steps.tag.outputs.version }}" ]; then
            echo "pyproject.toml version $PKG_VER does not match tag version ${{ steps.tag.outputs.version }}" >&2; exit 1; fi
          if [ "$INIT_VER" != "${{ steps.tag.outputs.version }}" ]; then
            echo "__init__ version $INIT_VER does not match tag version ${{ steps.tag.outputs.version }}" >&2; exit 1; fi

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Run tests
        run: |
          pip install .[dev]
          pytest -q || echo "Tests not critical yet"

      - name: Build
        run: python -m build

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
